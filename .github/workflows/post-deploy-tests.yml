##
## This is a re-usable workflow for running post-deployment tests.
##

name: Post-Deployment Test

on:
  # manual trigger
  workflow_dispatch:
    inputs:
      environment_name:
        required: true
        type: choice
        options:
        - sandbox
        - dev
        - staging
        - prod

      tetrahub_url:
        required: true
        type: string

      run_e2e:
        required: true
        type: choice
        options:
        - nightly
        - long
        - none
        default: none

      is_hotfix:
        required: false
        type: boolean
        default: false

      create_issue_on_failure:
        required: false
        type: boolean
        default: false

  # workflow triggered by another workflow
  workflow_call:
    # inputs should be the same as above.
    inputs:
      environment_name:
        required: true
        type: string
      tetrahub_url:
        required: true
        type: string
      run_e2e:
        required: true
        type: string
      is_hotfix:
        required: false
        type: boolean
        default: false
      create_issue_on_failure:
        required: false
        type: boolean
        default: false

env:
   PYTHON_VERSION: 3.8
   NODE_VERSION: 16

jobs:
  run_tests:
    name: "Test"
    runs-on: ubuntu-latest
    steps:
    - name: Dump Inputs
      shell: bash
      run: |
        echo "Github: ${{ toJson(inputs) }}"

    - name: Test
      if: ${{ inputs.gh_env == 'staging' }}
      run: |
        exit 1


  create_issue_for_failure:
    if: ${{ failure() && inputs.create_issue_on_failure }}
    name: Create Issue for Failure
    needs: [run_tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
    - uses: actions/checkout@v3.1.0
    - uses: JasonEtco/create-an-issue@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUN_ID: ${{ github.run_id }}
      with:
        filename: .github/templates/deployment-issue.md
